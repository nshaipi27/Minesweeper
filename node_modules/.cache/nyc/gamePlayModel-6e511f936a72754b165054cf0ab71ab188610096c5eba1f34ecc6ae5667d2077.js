function cov_x80iexf3j(){var path="/Users/norashaipi/labs/lab7-shaipin_rakotoal/models/gamePlayModel.js";var hash="b16f05d38d51cff06eda42b042458e3e8a7ee511";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/norashaipi/labs/lab7-shaipin_rakotoal/models/gamePlayModel.js",statementMap:{"0":{start:{line:6,column:30},end:{line:6,column:52}},"1":{start:{line:13,column:4},end:{line:13,column:17}},"2":{start:{line:25,column:4},end:{line:42,column:5}},"3":{start:{line:26,column:6},end:{line:30,column:7}},"4":{start:{line:27,column:8},end:{line:27,column:34}},"5":{start:{line:28,column:8},end:{line:28,column:50}},"6":{start:{line:29,column:8},end:{line:29,column:21}},"7":{start:{line:32,column:20},end:{line:32,column:80}},"8":{start:{line:35,column:19},end:{line:35,column:41}},"9":{start:{line:36,column:19},end:{line:36,column:33}},"10":{start:{line:37,column:6},end:{line:37,column:28}},"11":{start:{line:39,column:6},end:{line:39,column:63}},"12":{start:{line:40,column:6},end:{line:40,column:30}},"13":{start:{line:41,column:6},end:{line:41,column:19}},"14":{start:{line:56,column:25},end:{line:56,column:49}},"15":{start:{line:58,column:4},end:{line:67,column:5}},"16":{start:{line:65,column:6},end:{line:65,column:54}},"17":{start:{line:66,column:6},end:{line:66,column:18}},"18":{start:{line:68,column:4},end:{line:71,column:5}},"19":{start:{line:69,column:6},end:{line:69,column:56}},"20":{start:{line:70,column:6},end:{line:70,column:18}},"21":{start:{line:73,column:18},end:{line:74,column:46}},"22":{start:{line:75,column:17},end:{line:75,column:39}},"23":{start:{line:77,column:4},end:{line:96,column:5}},"24":{start:{line:78,column:19},end:{line:84,column:7}},"25":{start:{line:85,column:6},end:{line:92,column:8}},"26":{start:{line:94,column:6},end:{line:94,column:62}},"27":{start:{line:95,column:6},end:{line:95,column:18}},"28":{start:{line:107,column:18},end:{line:107,column:73}},"29":{start:{line:108,column:17},end:{line:108,column:39}},"30":{start:{line:110,column:4},end:{line:119,column:5}},"31":{start:{line:111,column:19},end:{line:111,column:51}},"32":{start:{line:112,column:6},end:{line:114,column:7}},"33":{start:{line:113,column:8},end:{line:113,column:20}},"34":{start:{line:115,column:6},end:{line:115,column:58}},"35":{start:{line:117,column:6},end:{line:117,column:52}},"36":{start:{line:118,column:6},end:{line:118,column:18}},"37":{start:{line:129,column:18},end:{line:129,column:66}},"38":{start:{line:130,column:17},end:{line:130,column:39}},"39":{start:{line:132,column:4},end:{line:137,column:5}},"40":{start:{line:133,column:6},end:{line:133,column:36}},"41":{start:{line:135,column:6},end:{line:135,column:61}},"42":{start:{line:136,column:6},end:{line:136,column:18}},"43":{start:{line:148,column:6},end:{line:148,column:86}},"44":{start:{line:149,column:17},end:{line:149,column:39}},"45":{start:{line:151,column:4},end:{line:156,column:5}},"46":{start:{line:152,column:6},end:{line:152,column:33}},"47":{start:{line:154,column:6},end:{line:154,column:68}},"48":{start:{line:155,column:6},end:{line:155,column:18}},"49":{start:{line:166,column:18},end:{line:166,column:64}},"50":{start:{line:167,column:17},end:{line:167,column:39}},"51":{start:{line:169,column:4},end:{line:176,column:5}},"52":{start:{line:170,column:21},end:{line:170,column:40}},"53":{start:{line:172,column:6},end:{line:172,column:20}},"54":{start:{line:174,column:6},end:{line:174,column:68}},"55":{start:{line:175,column:6},end:{line:175,column:18}},"56":{start:{line:185,column:18},end:{line:185,column:43}},"57":{start:{line:186,column:17},end:{line:186,column:39}},"58":{start:{line:188,column:4},end:{line:193,column:5}},"59":{start:{line:189,column:6},end:{line:189,column:24}},"60":{start:{line:191,column:6},end:{line:191,column:60}},"61":{start:{line:192,column:6},end:{line:192,column:16}},"62":{start:{line:197,column:0},end:{line:197,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:12,column:2},end:{line:12,column:3}},loc:{start:{line:12,column:18},end:{line:14,column:3}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:24,column:2},end:{line:24,column:3}},loc:{start:{line:24,column:35},end:{line:43,column:3}},line:24},"2":{name:"(anonymous_2)",decl:{start:{line:55,column:2},end:{line:55,column:3}},loc:{start:{line:55,column:64},end:{line:97,column:3}},line:55},"3":{name:"(anonymous_3)",decl:{start:{line:106,column:2},end:{line:106,column:3}},loc:{start:{line:106,column:42},end:{line:120,column:3}},line:106},"4":{name:"(anonymous_4)",decl:{start:{line:128,column:2},end:{line:128,column:3}},loc:{start:{line:128,column:32},end:{line:138,column:3}},line:128},"5":{name:"(anonymous_5)",decl:{start:{line:146,column:2},end:{line:146,column:3}},loc:{start:{line:146,column:34},end:{line:157,column:3}},line:146},"6":{name:"(anonymous_6)",decl:{start:{line:165,column:2},end:{line:165,column:3}},loc:{start:{line:165,column:32},end:{line:177,column:3}},line:165},"7":{name:"(anonymous_7)",decl:{start:{line:184,column:2},end:{line:184,column:3}},loc:{start:{line:184,column:20},end:{line:194,column:3}},line:184}},branchMap:{"0":{loc:{start:{line:26,column:6},end:{line:30,column:7}},type:"if",locations:[{start:{line:26,column:6},end:{line:30,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:26},"1":{loc:{start:{line:26,column:10},end:{line:26,column:33}},type:"binary-expr",locations:[{start:{line:26,column:10},end:{line:26,column:20}},{start:{line:26,column:24},end:{line:26,column:33}}],line:26},"2":{loc:{start:{line:58,column:4},end:{line:67,column:5}},type:"if",locations:[{start:{line:58,column:4},end:{line:67,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:58},"3":{loc:{start:{line:68,column:4},end:{line:71,column:5}},type:"if",locations:[{start:{line:68,column:4},end:{line:71,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:68},"4":{loc:{start:{line:112,column:6},end:{line:114,column:7}},type:"if",locations:[{start:{line:112,column:6},end:{line:114,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:112}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b16f05d38d51cff06eda42b042458e3e8a7ee511"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_x80iexf3j=function(){return actualCoverage;};}return actualCoverage;}cov_x80iexf3j();/**
 * GamePlayModel Class
 *
 * This class helps interact with the table "GamePlayModel"
 */const{connectToDatabase}=(cov_x80iexf3j().s[0]++,require("../database"));class GamePlayModel{/**
   * Constructor - Initializes database connection
   */constructor(db){cov_x80iexf3j().f[0]++;cov_x80iexf3j().s[1]++;this.db=db;}/**
   * Check if a specific record exists in a given table
   *
   * @param {string} table - The name of the database table
   * @param {string} column - The column to search for the given ID
   * @param {number} id - The ID to check for existence
   * @returns {boolean} - Returns true if the record exists, otherwise false
   */checkIfExists(table,column,id){cov_x80iexf3j().f[1]++;cov_x80iexf3j().s[2]++;try{cov_x80iexf3j().s[3]++;if((cov_x80iexf3j().b[1][0]++,id==null)||(cov_x80iexf3j().b[1][1]++,isNaN(id))){cov_x80iexf3j().b[0][0]++;cov_x80iexf3j().s[4]++;console.log("id is null");cov_x80iexf3j().s[5]++;console.error(`Invalid ID passed: ${id}`);cov_x80iexf3j().s[6]++;return false;}else{cov_x80iexf3j().b[0][1]++;}const query=(cov_x80iexf3j().s[7]++,`SELECT COUNT(*) AS count FROM ${table} WHERE ${column} = ?`);const stmt=(cov_x80iexf3j().s[8]++,this.db.prepare(query));const info=(cov_x80iexf3j().s[9]++,stmt.get([id]));cov_x80iexf3j().s[10]++;return info.count>0;}catch(error){cov_x80iexf3j().s[11]++;console.error("Error checking if record exists:",error);cov_x80iexf3j().s[12]++;console.log("eeeeeeee");cov_x80iexf3j().s[13]++;return false;}}/**
   * Create a new gameplay record
   *
   * @param {number} game_definition_id - The ID of the game definition
   * @param {number} player_id - The ID of the player
   * @param {number} score - The score achieved by the player
   * @param {string} outcome - The outcome of the gameplay (e.g., win/loss)
   * @returns {object|null} - The created gameplay record or null if an error occurs
   */createGamePlay(game_definition_id,player_id,score,outcome){cov_x80iexf3j().f[2]++;const completed_at=(cov_x80iexf3j().s[14]++,new Date().toISOString());cov_x80iexf3j().s[15]++;if(!this.checkIfExists("GameDefinitions","game_definition_id",game_definition_id)){cov_x80iexf3j().b[2][0]++;cov_x80iexf3j().s[16]++;console.error("Error: Game ID does not exist.");cov_x80iexf3j().s[17]++;return null;}else{cov_x80iexf3j().b[2][1]++;}cov_x80iexf3j().s[18]++;if(!this.checkIfExists("Players","player_id",player_id)){cov_x80iexf3j().b[3][0]++;cov_x80iexf3j().s[19]++;console.error("Error: Player ID does not exist.");cov_x80iexf3j().s[20]++;return null;}else{cov_x80iexf3j().b[3][1]++;}const query=(cov_x80iexf3j().s[21]++,`INSERT INTO GamePlays (game_definition_id, player_id, score, outcome, completed_at) 
                       VALUES (?, ?, ?, ?, ?)`);const stmt=(cov_x80iexf3j().s[22]++,this.db.prepare(query));cov_x80iexf3j().s[23]++;try{const info=(cov_x80iexf3j().s[24]++,stmt.run(game_definition_id,player_id,score,outcome,completed_at));cov_x80iexf3j().s[25]++;return{id:info.lastInsertRowid,game_definition_id,player_id,score,outcome,completed_at};}catch(error){cov_x80iexf3j().s[26]++;console.error("Error inserting into GamePlays:",error);cov_x80iexf3j().s[27]++;return null;}}/**
   * Update the score of an existing gameplay record
   *
   * @param {number} game_play_id - The ID of the gameplay record to update
   * @param {number} newScore - The new score to be updated
   * @returns {object|null} - The updated gameplay record or null if an error occurs
   */updateGameScore(game_play_id,newScore){cov_x80iexf3j().f[3]++;const query=(cov_x80iexf3j().s[28]++,`UPDATE GamePlays SET score = ? WHERE game_play_id = ?`);const stmt=(cov_x80iexf3j().s[29]++,this.db.prepare(query));cov_x80iexf3j().s[30]++;try{const info=(cov_x80iexf3j().s[31]++,stmt.run(newScore,game_play_id));cov_x80iexf3j().s[32]++;if(info.changes===0){cov_x80iexf3j().b[4][0]++;cov_x80iexf3j().s[33]++;return null;}else{cov_x80iexf3j().b[4][1]++;}cov_x80iexf3j().s[34]++;return{id:game_play_id,updatedScore:newScore};}catch(error){cov_x80iexf3j().s[35]++;console.error("Error updating score:",error);cov_x80iexf3j().s[36]++;return null;}}/**
   * Retrieve a gameplay record by its ID
   *
   * @param {number} game_play_id - The ID of the gameplay record
   * @returns {object|null} - The retrieved gameplay record or null if an error occurs
   */getGamePlayById(game_play_id){cov_x80iexf3j().f[4]++;const query=(cov_x80iexf3j().s[37]++,"SELECT * FROM GamePlays WHERE game_play_id = ?");const stmt=(cov_x80iexf3j().s[38]++,this.db.prepare(query));cov_x80iexf3j().s[39]++;try{cov_x80iexf3j().s[40]++;return stmt.get(game_play_id);}catch(error){cov_x80iexf3j().s[41]++;console.error("Error fetching gameplay by ID:",error);cov_x80iexf3j().s[42]++;return null;}}/**
   * Retrieve a gameplay record by a playerID the most recent one
   *
   * @param {number} player_id - The ID of the player
   * @returns {object|null} - The retrieved gameplay record or null if an error occurs
   */getGamePlayByaPlayer(player_id){cov_x80iexf3j().f[5]++;const query=(cov_x80iexf3j().s[43]++,"SELECT * FROM GamePlays WHERE player_id = ? ORDER BY completed_at DESC LIMIT 1");const stmt=(cov_x80iexf3j().s[44]++,this.db.prepare(query));cov_x80iexf3j().s[45]++;try{cov_x80iexf3j().s[46]++;return stmt.get(player_id);}catch(error){cov_x80iexf3j().s[47]++;console.error("Error fetching gameplay by player ID:",error);cov_x80iexf3j().s[48]++;return null;}}/**
   * Retrieve a  ALL gameplay record by a playerID
   *
   * @param {number} player_id - The ID of the player
   * @returns {object|null} - The retrieved gameply all game
   */getAllGameByPlayer(player_id){cov_x80iexf3j().f[6]++;const query=(cov_x80iexf3j().s[49]++,"SELECT * FROM GamePlays WHERE player_id = ? ");const stmt=(cov_x80iexf3j().s[50]++,this.db.prepare(query));cov_x80iexf3j().s[51]++;try{const result=(cov_x80iexf3j().s[52]++,stmt.all(player_id));cov_x80iexf3j().s[53]++;return result;}catch(error){cov_x80iexf3j().s[54]++;console.error("Error fetching gameplay by player ID:",error);cov_x80iexf3j().s[55]++;return null;}}/**
   * Retrieve all gameplay records
   *
   * @returns {Array} - An array of gameplay records or an empty array if an error occurs
   */getAllGamePlays(){cov_x80iexf3j().f[7]++;const query=(cov_x80iexf3j().s[56]++,"SELECT * FROM GamePlays");const stmt=(cov_x80iexf3j().s[57]++,this.db.prepare(query));cov_x80iexf3j().s[58]++;try{cov_x80iexf3j().s[59]++;return stmt.all();}catch(error){cov_x80iexf3j().s[60]++;console.error("Error fetching all gameplays:",error);cov_x80iexf3j().s[61]++;return[];}}}cov_x80iexf3j().s[62]++;module.exports=GamePlayModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,